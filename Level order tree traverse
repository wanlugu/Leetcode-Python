{
class Node:
    def __init__(self, val):
        self.right = None
        self.data = val
        self.left = None
class Tree:
    def createNode(self, data):
        return Node(data)
            
    def traverse(self, root):
        if root is not None:
            self.traverse(root.left)
            print(root.data, end=' ')
            self.traverse(root.right)
# Driver Program
if __name__=='__main__':
    t = int(input())
    for i in range(t):
        n = int(input())
        arr = input().strip().split()
        tree = Tree()
        lis = {}
        root = None
        root = tree.createNode(int(arr[0]))
        lis[root.data]=root
        k=0
        for j in range(n):
            if int(arr[k]) in lis:
                ptr = tree.createNode(int(arr[k+1]))
                if arr[k+2]=='L':
                    lis[int(arr[k])].left = ptr
                else:
                    lis[int(arr[k])].right = ptr
                lis[int(arr[k+1])] = ptr
                k+=3
        traverse_level_order(root)
        print()
# Contributed by: Harshit Sidhwa
}

##################### start from here #########################
def printLevelOrder(root): 
    # Base Case 
    if root is None: 
        return
      
    # Create an empty queue for level order traversal 
    queue = [] 
  
    # Enqueue Root and initialize height 
    queue.append(root) 
  
    while(len(queue) > 0): 
        # Print front of queue and remove it from queue 
        print queue[0].data,  # in python2
        node = queue.pop(0) 
  
        #Enqueue left child 
        if node.left is not None: 
            queue.append(node.left) 
  
        # Enqueue right child 
        if node.right is not None: 
            queue.append(node.right) 
            
            
########################## start from any given level ###########
def traverse_level_order( root ):
    # Code here
    if root ==None:
        return
    
    if root:
        h = height(root)
    for i in range(1,h+1):
        traverse_givenlevel(root, i)
    
def traverse_givenlevel(root, level):
    if root == None:
        return
    
    if level ==1:
        print (root.data, end=" ")
    if level >1:
        traverse_givenlevel(root.left, level-1)
        traverse_givenlevel(root.right, level-1)
        
def height(node):
    if node == None:
        return 0
    if node is not None:
        left_hight = height(node.left)
        right_height = height(node.right)
        
        return (max(left_hight,right_height)+1)
