######################## list ##########################
x = [1,2] same with x = ([1,2])
x.append(1), x. extend(1), x.extend([1]) returns [1,2,1]
x.append([1]) returns [1,2,[1]]
x.insert(i,m) insert m at position i
# 
x = [1]*10, return a list of ten 1
x = [2]*2*3 return 6 of 2
[1, 2, 3] + [4, 5, 6]	returns [1, 2, 3, 4, 5, 6]
no minus for list
# remove
list.pop(obj=list[-1]) #Removes and returns last object or obj from list
list.remove(x) # remove the first value of x
del list[i], del list[:]=list.clear()
# list search
list.index(x[, start[, end]])
#Return zero-based index in the list of the first item whose value is equal to x. Raises a ValueError if there is no such item.
list.count(x)
#Return the number of times x appears in the list.
list.sort(key=None, reverse=False)
#Sort the items of the list in place (the arguments can be used for sort customization, see sorted() for their explanation).
list.reverse() = list(reversed(list))
#Reverse the elements of the list in place. change the order of list
list.copy()
#Return a shallow copy of the list. Equivalent to a[:].
len(x) # the length of a list
max(x) # the maximum in a list

list(tuple or set) # convert to list type
# difference of two list
by set(): list( set(list1)-set(list2) )
list( set(list1).symmetric_difference(set(list2)) )

# use as queue, can implement a package
from collections import deque
queue = deque(["Eric", "John", "Michael"])
queue.append("Terry")           # Terry arrives
queue.popleft()                 # The first to arrive now leaves




########################### string ############################
a = "Hello, World!"
print(a[1]), 引用
a.strip() 去除两边多余空格
a.lower()， a.upper() 返回小写大写模式（只针对字母）
a.replace("H", "J"), 暂时，并不改变a
a.split(",") 用，分隔成多个element
a+a returns 'Hello, World!Hello, World!' 合并string
reversed(a) 返回reversed objective
list(reversed(a))
['!', 'd', 'l', 'r', 'o', 'W', ' ', ',', 'o', 'l', 'l', 'e', 'H']



################ dictionary #########################






##################### pandas.dataframe###########################
pandas.DataFrame([data, index, columns, dtype, copy])
d = {'col1': [1, 2], 'col2': [3, 4]}
df = pd.DataFrame(data=d)
df
   col1  col2
0     1     3
1     2     4

df.size = col *row
df.shape = (row,col)
df.columns, df.rows:  return labels 

df.reset_index(drop=True): add a new 0-n index, and delete original index
df.reindex(a list): extract rows in list, and in the order of list
df.rename(index=str, columns={"A": "a", "B": "c"})
df.rename(str.lower, axis='columns')
df.rename({1: 2, 2: 4}, axis='index'): rename the index or columns

