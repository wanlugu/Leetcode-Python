Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Determine if you are able to reach the last index.

Example 1:

Input: [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum
             jump length is 0, which makes it impossible to reach the last index.
             


##################### Backtracking ##############
Time complexity : O(n^2)
Space complexity : O(2n) = O(n)O(2n)=O(n).
################################################
public class Solution {
    public boolean canJumpFromPosition(int position, int[] nums) {
        if (position == nums.length - 1) {
            return true;
        }

        int furthestJump = Math.min(position + nums[position], nums.length - 1);
        for (int nextPosition = furthestJump; nextPosition > position; nextPosition--) {
            if (canJumpFromPosition(nextPosition, nums)) {
                return true;
            }
        }

        return false;
    }

    public boolean canJump(int[] nums) {
        return canJumpFromPosition(0, nums);
    }
}
##################### 只要当前index之前（包括当前）所能到达最远距离不是当前位置就可以继续 ##########
class Solution(object):
    def canJump(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if not nums:
            return False
        length = len(nums)
        index = 0
        longest = nums[0]
        while index <= longest:
            if longest >= length - 1:
                return True
            longest = max(longest, index + nums[index])
            index += 1
        return False


######################### top down ##########################
status = [1,2,0]

class Solution(object):
    memo = list()
    def canJump_position(self,position,nums):
        for i in range(0,len(nums)):
            self.memo.append(0)
        self.memo[len(nums)-1] = 1
        
        if self.memo[position]!= status[2]:
            if self.memo[position] == status[0]:
                return True
            else:
                return False
            
        
        max_step = min(position+nums[position], len(nums)-1)
        for nextstep in range(position+1,max_step+1):
            if self.canJump_position(nextstep,nums):
                self.memo[position] = status[0]
                return True
        self.memo[position] = status[1]
        return False
        
    def canJump(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        memo = [0]*len(nums)
        memo[len(nums)-1]=1
        return self.canJump_position(0,nums)
            
            
