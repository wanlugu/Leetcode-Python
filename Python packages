######################## Random number ########################
from random import *
shuffle(list), uniform(a,b), randint(a,b), sample(list,n) return list
 
######################## numpy ########################
import numpy as np
np.random.seed(0)  # seed for reproducibility
x1 = np.random.randint(10, size=(2,4)) 
x1.ndim, x1.shape, x1.size, x1.dtype
### array slicing
x[1::2], from index 1 every other element
x[::-1], just reverse
### array copy, reshape
x.copy(), the copy does not influence original
np.arange(1, 10).reshape((3, 3))
x[:, np.newaxis]=x.reshape(n,1), x[np.newaxis,:]=x[1:n]
### concatenate
#same dimension
np.concatenate([x, x])  along the first axis, extend, two rows to four rows
np.concatenate([y, y]，axis=1)  along the second axis， two rows to two rows
# mixed dimension
np.hstack([x,y])
np.vstack([x,y]) 
np.dstack
### splitting
x = [1, 2, 3, 99, 99, 3, 2, 1,0]
x1, x2, x3 = np.split(x, [index1, index2,index3])
upper,lower = np.vsplit(x.reshape(3,3),[2])
left,right = np.hsplit(x.reshape(3,3),[2])
np.dsplit
## rasampling, returnable
boot = resample(data, replace=True, n_samples=4, random_state=1)


######################## re - Regular expression operations########################
. matches any character, ^ start with, $ end with (foo$ matches only foo)
* matches zero or more repetitions (ab* matches a,ab,abb,...)
+ matches one or more repetitions
? matches 0 or 1 repetition
*?, +?, ?? from greedy to non-greedy (<.*> matches whole string while <.*?> matches as fewer as possible)
{m}, {m,n} matches exactly m or m to n repititions
{m,n}? matches as fewer as possible
[] indicate a set of character

re.compile('[/(){}\[\]\|@,;]') 
re.sub(pattern, replacement, string) #replace
######################### pandas ####################
data = pd.read_csv("file path")
list(data) list(data.columns.values) get all col names
data.head(n)
data.iloc[r1:r2] subset by rows
data.iloc[:,[1,2,5]] by col index
data.loc[:,'x2':'x4'] by col names
data['x3'] directly by col name


# construct a dataframe
pd.DataFrame([data, index, columns, dtype, copy])
d = {'col1': [1, 2], 'col2': [3, 4]}
df = pd.DataFrame(data=d)
df
   col1  col2
0     1     3
1     2     4

df.size = col *row
df.shape = (row,col)
df.columns, df.rows:  return labels 

# modifying index, colnames
df.reset_index(drop=True): add a new 0-n index, and delete original index
df.reindex(a list): extract rows in list, and in the order of list
df.rename(index=str, columns={"A": "a", "B": "c"})
df.rename(str.lower, axis='columns')
df.rename({1: 2, 2: 4}, axis='index'): rename the index or columns

data.unique() get all unique values
data.nunique() get # of unique values
numpy.unique(data, return_counts= True) return unique values and # in each value

list(data).index(max(list(data))) return the index of maximum


print("is %.2f"%data) keep 2 digit after decimal
round(x,10), "%10g", $.10g$


# zip
# Return a list of tuples, where each tuple contains the i-th element
# from each of the argument sequences.  The returned list is truncated
# in length to the length of the shortest argument sequence.
A0 = dict(zip(('a','b','c','d','e'),(1,2,3,4,5)))
return A0 = {'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4}
################# 
###############################################
numericVariable% 10, remainder after dividing by 10
numericVariable//10
%0.2f %s %d %x
repr(object): return string format
sorted([2,1,4])=[1,2,4]

# binary,
 bin(),  oct(),  hex()
chr(int) 
ord("a")


##########################################
FUNCTION
Percentage Calculation
Write a function percent(value, total) that takes in two numbers as arguments, 
and returns the percentage value as an integer.
def percent(x,y):
  z = int(float(x)/float(y)*100)
  return z

def percent(a,b):
 c=a*1.0/b
 c=c*100
 return round(c,0)

Sum Of Last Digits
def getSumOfLastDigits(numList): 
     n=len(numList)
     sum=0
     for i in range(0,n):
       sum = sum+numList[i]%10
     return (sum)

def getSumOfLastDigits(numList):
 sum=0
 l=len(numList)
 while(l>0) :
  num=numList[l-1]%10
  sum=sum+num
  l=l-1
 return sum


Define a function calls addFirstAndLast(x) that takes in a list of numbers 
and returns the sum of the first and last numbers.
def addFirstAndLast(x):
 if(len(x)==0):
  return 0
 elif(len(x)==1):
  return x[0]
 else:
  x.sort()
  return x[0]+x[-1]

Complete the 'lambda' expression so that it returns True if the argument is an even number, 
and False otherwise.
even = lambda x:x%2==0

##########################################
CONDITIONALS

def isPrime(num):
 
 if num > 1:
   
 # check for factors
   
   for i in range(2,num):
       
     if (num % i) == 0:
           
     print(num,"is not a prime number")
           
     print(i,"times",num//i,"is",num)
           
     break
   
   else:
       
    print(num,"is a prime number")
       

   # if input number is less than
   
# or equal to 1, it is not prime
 
 else:
   
   print(num,"is not a prime number")

#
Write a function that converts the time to 24hr format.
Examples
    >>> time24hr('12:34am')
    '0034hr'
    >>> time24hr('12:15pm')
    '1215hr'
#
def time24hr(tstr): 
  tstrsplit = tstr.split(":")
  if tstrsplit[1][-2:] == "am" and tstrsplit[0] == "12":
      return "00"+tstrsplit[1][0:2]+"hr"
  elif tstrsplit[1][-2:] == "am" :
      return tstrsplit[0]+tstrsplit[1][0:2]+"hr"
  elif tstrsplit[1][-2:] == "pm" and tstrsplit[0] == "12":
      return tstrsplit[0]+tstrsplit[1][0:2]+"hr"
  else:
      return str(int(tstrsplit[0]) + 12)+tstrsplit[1][0:2]+"hr"

################# checkSubarraySum ###########
nums=[23,2,4,6,7]
k=6
def checkSubarraySum(nums, k):
        count = 0
        lookup = {0: -1}
        for i, num in enumerate(nums):
            count += num
            if k:
                count %= k
            if count in lookup:
                if i - lookup[count] > 1:
                    return True
            else:
                lookup[count] = i
        
        return False
        print(count)
checkSubarraySum(nums, k)
######################################################
Pairwise Comparison Of DNA Sequences.
Pairwise comparision of DNA sequences is a popular technique used in Bioinformatics. 
It usually involves some scoring scheme to express the degree of similarity. 
Write a function that compares two DNA sequences based on the following scoring 
scheme: +1 for a match, +3 for each consecutive match and -1 for each mismatch.
 >>> print pairwiseScore("ATTCGT", "ATCTAT")
    ATTCGT
    ||   |
    ATCTAT
    Score: 2 
    >>> print pairwiseScore("GATAAATCTGGTCT", "CATTCATCATGCAA")
    GATAAATCTGGTCT
     ||  |||  |   
    CATTCATCATGCAA
    Score: 4 
#
def pairwiseScore(seqA, seqB): 
  la = len(seqA)
  lb = len(seqB)
  l = min(la,lb)
  n = [0]*l
  s = ""
  for i in range (0,l):
    if seqA[i]==seqB[i]:
       if n[i-1]==0 or n[i-1]==-1:
          n[i] = 1
       elif n[i-1] ==1 or n[i-1]==3:
          n[i] = 3
       s = s+ "|"
    else:
       n[i] = -1
       s = s+" "
  return seqA+"\n"+s+ "\n" +seqB+"\n" +"Score: %d" %sum(n)
