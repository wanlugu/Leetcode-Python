Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find the minimum number of conference rooms required.

Example 1:

Input: [[0, 30],[5, 10],[15, 20]]
Output: 2
Example 2:

Input: [[7,10],[2,4]]
Output: 1
###########################################################################


# Definition for an interval.
# class Interval(object):
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e

class Solution(object):
    def minMeetingRooms(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: int
        """
        n = len(intervals)
        x1 = intervals
        x2 = intervals
        x1= sorted(x1,key=lambda x: x.start)
        x2= sorted(x2,key=lambda x: x.end)
        endpoint = 0
        room =0
        for startpoint in range(0,n):
            if x1[startpoint].start < x2[endpoint].end:
                room +=1
            else:
                endpoint +=1
        return room

###############################################################################
# Definition for an interval.
# class Interval(object):
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e

class Solution(object):
    def minMeetingRooms(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: int
        """
        n = len(intervals)
        timeline = {}
        for i in range(0,n):
            if intervals[i].start not in timeline:
                timeline[intervals[i].start] =1
            else: 
                timeline[intervals[i].start] +=1
            if intervals[i].end not in timeline:
                timeline[intervals[i].end] =-1
            else: 
                timeline[intervals[i].end] -=1
                
        keys = sorted(timeline.keys())
        room = 0
        res =0
        for timepoint in keys:
            room += timeline[timepoint]
            res = max(res, room)
        return res
            
##############################################################################
# Definition for an interval.
# class Interval(object):
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e

class Solution(object):
    def minMeetingRooms(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: int
        """
        n = len(intervals)
        intervals = sorted(intervals,key= lambda x: x.start)
        q = []
        if n ==0:
            return 0
        if n>0:
            q.append(intervals[0].end)   
        
            for i in range(1,n):
                if min(q) <= intervals[i].start:
                    q.remove(min(q))
                    q.append(intervals[i].end)
                else:
                    q.append(intervals[i].end)
                    
        return len(q)
            
        
