You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

##########################################################################################################
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        list1 = l1
        list2 = l2
        
        s = ListNode(0)
        ss =s
        carry = 0
        while list1 or list2:
            
            val = carry
            if list1:
                val += list1.val
                list1 = list1.next
            if list2:
                val += list2.val
                list2 = list2.next
            carry, val = divmod(val,10)
            ss.next = ListNode(val)
            ss= ss.next
            if carry == 1:
                ss.next = ListNode(1)
        return s.next
            
